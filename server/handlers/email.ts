





/**
 * handlers for all email-related requests.
 */



import      db               from './database.ts';

import      nodemailer       from 'nodemailer';
import { 
            Request, 
            Response,
            NextFunction, 
                           } from 'express';







type MailOptions = {
    from:            string,
    to:              string,
    subject?:        string,
    text?:           string,
    html?:           string,
    attachments?: { filename: string, path: string, encoding: string }[]
};




// helper leveraged by all mailer functions to deliver email via nodemailer
// accepts a MailOptions object and returns a promise.
async function deliverEmail(options : MailOptions, cleanUp? : () => void): Promise<void> {

    const transporter = nodemailer.createTransport({

        host:  'smtp.gmail.com',
        port:   465,
        secure: true,
        auth:   {
                    user: process.env.EMAIL,
                    pass: process.env.EMAILPASS
                }
    } );

    return new Promise((resolve, reject) => {

        transporter.sendMail(options, (err, info) => {

            if (err) {
                        console.error(`Error sending email: ${err.message}`);
                        reject(err);
                     } 
            else     {
                        console.log(`Email sent: ${info.response}`);
                        cleanUp && cleanUp()
                        resolve();
                     }
        } );
    } );
}




// receives email from contact form and sets it to the email address in the .env file.
async function formMail(request: Request, response: Response) {


    console.log('\nreceiving a note from the email form...\n');


    const { 
            email, 
            message, 
            subject,

          } = request.body;


    const   options: MailOptions = {

        from:     email,
        to:       process.env.EMAIL || '',
        subject: `WEBSITE MSG: ${subject}`,
        text:     message
    };


    try           {
                        await deliverEmail(options);
                        response.send(`Message successfully received from ${email}.`);
                  } 
    catch (error) {
                        response.status(400).send(`Error receiving message from ${email}`);
                  }
}




// emails a login link to subscribers who wish to update or cancel their subscription.
async function updateMail(email: string, token: string, res: Response) {


    console.log('\nsending out a subscription-update link...\n');

    const updateURL = `http://localhost:5173/subscription-update?token=${token}`;

    const message   = `Click the link below to update your subscription preferences:\n\n${updateURL}`;

    const options: MailOptions = {

        from:     process.env.EMAIL || '',
        to:       email,
        subject: `Subscription update`,
        text:     message
    };


    try           {
                    await deliverEmail(options);
                    res.send(`Update link successfully sent to ${email}.`);
                  } 
    catch (error) {
                    res.status(400).send(`Error scheduling update for ${email}`);
                  }
}





/**
 * delivers news releases generated by the admin panel.
 * 
 * it first gets called immediately after the release is gneerated,
 * to send a sample to the admin for review.
 * 
 * following admin approval, it gets called again with the 
 * publish prop, which sends it to all the journalists in the database.
 */
async function deliverNewsRelease(request: Request, response: Response, next: NextFunction) {


    if (process.env.EMAIL === undefined) { return response.status(400).send('No email address found.'); }

    console.log('emailing news release...');

    let     errorCount                = 0;

    const   publish                   = request.body.publish;

    const   source                    = publish ? request.body : response.locals;

    const { headline, pdf_url, html } = source;


    // helper function that gets called directly to send a sample,
    // or gets called by deliverToJournalists to send the full release.
    async function deliver( email : string ) {


        const mailOptions: MailOptions = {

            from:        `"Sabu's Cubs" ${process.env.EMAIL}` || '',
            to:          email,
            subject:    `NEWS RELEASE: ${headline}`,
            html:        html,
            attachments: [ {
                            filename: `${headline}.pdf`,
                            path:      pdf_url,
                            encoding: 'base64'
                         } ]
        };

        try           {  await deliverEmail(mailOptions);  }

        catch (error) {  publish  ?  errorCount++  
                                  :  response.status(400).send('Newsletter delivery failed'); 
                      }
    }


    // helper function that gets called if publish is true,
    // to send the release to all the journalists in the database.
    async function deliverToJournalists(data: unknown) {

        const { rows } =  data as { rows: { email: string }[] };

        const             emailPromises = rows.map((row: { email: string }) => deliver(row.email));

        await Promise.all(emailPromises);

        response.send(`Newsletter delivered to ${rows.length} journalists with ${errorCount} errors.`);

    }


    // if publish is false, send a sample to the admin for review.
    // otherwise, send the release to all the journalists in the database.
    if (!publish) {     
                        deliver(process.env.EMAIL);  
                        next();
                  }
    else          {
                        const emails = await db.pool.query(`SELECT email FROM journalists;`);
                        deliverToJournalists(emails);
                  }
}



// sends a reset link to the website's gmail account.
function sendResetLink( request: Request, response: Response ) {


    console.log('preparing to send reset link...');  console.log(response.locals);

    const email = request.body[0];

    const url   = `${process.env.URL}/simba?id=${response.locals.resetId}&token=${response.locals.resetToken}`;

    const resetLinkOptions = {      
                                to:        email as string,
                                from:    `"Sabu's Cubs" ${process.env.EMAIL}`,
                                subject:  `Password Reset`,
                                text:     `Reset your password here => ${url}`
                            } 
    
    const cleanUp = () => response.send('reset link sent');

    deliverEmail(resetLinkOptions, cleanUp);
}



export default  { 
                    formMail, 
                    updateMail,
                    sendResetLink,
                    deliverNewsRelease, 
                };











